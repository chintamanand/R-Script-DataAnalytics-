a1<-data.frame(data2$fixed.acidity)
exp1<-predict.lm(relation,newdata = a1)
print(summary(exp1))
for(i in 0:1000){
exp1=exp1-1
}
hist(exp1)
hist(data2$alcohol)
res1<-data.frame(data2$alcohol[1:1000],exp1[1:1000])
write.csv(res1,"output3.csv")
a1<-data.frame(data2$fixed.acidity)
exp1<-predict.lm(relation,newdata = a1)
print(summary(exp1))
for(i in 0:1000){
exp1[i]=exp1-1
}
hist(exp1)
hist(data2$alcohol)
res1<-data.frame(data2$alcohol[1:1000],exp1[1:1000])
write.csv(res1,"output3.csv")
a1<-data.frame(data2$fixed.acidity)
exp1<-predict.lm(relation,newdata = a1)
print(summary(exp1))
for(i in 0:1000){
exp1[i]=exp1[i]-1
}
hist(exp1)
hist(data2$alcohol)
res1<-data.frame(data2$alcohol[1:1000],exp1[1:1000])
write.csv(res1,"output3.csv")
library("outliers")
library("ggpubr")
setwd("F:/4thyear/Wine Quality")
data1<-read.csv(file="winequality-white.csv", header=TRUE, sep=";")
data2<-read.csv(file="winequality-red.csv",header=TRUE,sep=";")
summary(data1)
summary(data2)
a<-hist(x=data1$fixed.acidity,xlab="Fixed Acidity",col = "blue",border = "red")
b<-hist(x=data2$fixed.acidity,xlab = "Fixed Acidity",col="blue",border="red")
plot(data1$fixed.acidity,data1$alcohol ,main="Scatter Plot for data1 Acidity and  data1 Alcohol",xlab="data1",ylab="data2",xlim = c(6,8),ylim =c(10,12))
res<-cor.test(data1$fixed.acidity , data1$alcohol  , method="pearson")
print(res)
outlier_values <- boxplot.stats(data1$fixed.acidity)$out
boxplot(data1$fixed.acidity, main="Acidity ", boxwex=0.1)
mtext(paste("With Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlierKD <- function(dt, var) {
var_name <- eval(substitute(var),eval(dt))
tot <- sum(!is.na(var_name))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
message("Outliers identified: ", na2 - na1, " from ", tot, " observations")
message("Proportion (%) of outliers: ", (na2 - na1) / tot*100)
message("Mean of the outliers: ", mo)
m2 <- mean(var_name, na.rm = T)
message("Mean without removing outliers: ", m1)
message("Mean if we remove outliers: ", m2)
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
message("Outliers successfully removed", "\n")
return(invisible(dt))
} else{
message("Nothing changed", "\n")
return(invisible(var_name))
}
}
outlierKD(data1, data1$fixed.acidity)
outlier_values <- boxplot.stats(data1$fixed.acidity)$out
boxplot(data1$fixed.acidity, main="Acidity ", boxwex=0.1)
mtext(paste("Without Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
relation<-lm(data1$alcohol~data1$fixed.acidity)
print(relation)
plot(data1$fixed.acidity,data1$alcohol,col = "black",main = "Relationship between Acidity and alcohol Content",
abline(lm(data1$alcohol~data1$fixed.acidity)),cex=1.2,pch = 19,xlab = "Acidity Level",ylab = "Alcohol Content",xlim = c(6,8),ylim = c(10,12))
a1<-data.frame(data2$fixed.acidity)
exp1<-predict.lm(relation,newdata = a1)
print(summary(exp1))
hist(exp1)
hist(data2$alcohol)
res1<-data.frame(data2$alcohol[1:1000],exp1[1:1000])
write.csv(res1,"output3.csv")
relation1<-lm(data1$alcohol~(data1$fixed.acidity+data1$citric.acid+data1$residual.sugar+data1$pH+data1$volatile.acidity+data1$chlorides))
print(relation1)
a2<-coef(relation1)
a2
acidity1<-data2[1:1000,1]
vacid1<-data2[1:1000,2]
citric1<-data2[1:1000,3]
rsugar1<-data2[1:1000,4]
cholride1<-data2[1:1000,5]
ph1<-data2[1:1000,9]
i=1
alcohol1=0;
for(i in 0:1000){
alcohol1[i]=acidity1*a2[2]+citric1*a2[3]+rsugar1*a2[4]+ph1*a2[5]+vacid1*a2[6]+cholride1*a2[7]
}
alcohol1
res3<-data.frame(data2$alcohol[1:1000],alcohol1)
write.csv(res3,"output2.csv")
library("e1071")
res<-cor.test(data1$fixed.acidity , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$fixed.acidity , data1$alcohol  , method="Spearman")
res<-cor.test(data1$fixed.acidity , data1$alcohol  , method="spearman")
print(res)
res<-cor.test(data1$fixed.acidity , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$volatile.acidity  , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$fixed.acidity  , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$volatile.acidity , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$citric.acid , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$residual.sugar , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$chlorides , data1$alcohol  , method="pearson")
print(res)
library("e1071")
library("outliers")
library("ggpubr")
setwd("F:/4thyear/Wine Quality")
data1<-read.csv(file="winequality-white.csv", header=TRUE, sep=";")
data2<-read.csv(file="winequality-red.csv",header=TRUE,sep=";")
summary(data1)
summary(data2)
a<-hist(x=data1$fixed.acidity,xlab="Fixed Acidity",col = "blue",border = "red")
b<-hist(x=data2$fixed.acidity,xlab = "Fixed Acidity",col="blue",border="red")
plot(data1$fixed.acidity,data1$alcohol ,main="Scatter Plot for data1 Acidity and  data1 Alcohol",xlab="data1",ylab="data2",xlim = c(6,8),ylim =c(10,12))
res<-cor.test(data1$fixed.acidity  , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$volatile.acidity , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$citric.acid , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$residual.sugar , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$residual.sugar , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$chlorides , data1$alcohol  , method="pearson")
print(res)
boxplot(data1$alcohol~data1$fixed.acidity, data = data1, xlab = "fixed.acidity",ylab = "alcohol", main = "BoxPlot for Predicated Data")
boxplot(data1$alcohol~data1$volatile.acidity , data = data1, xlab = "fixed.acidity",ylab = "alcohol", main = "BoxPlot for Predicated Data")
boxplot(data1$alcohol~data1$volatile.acidity , data = data1, xlab = "volatile Acidity ",ylab = "alcohol", main = "BoxPlot for Predicated Data")
outlier_values <- boxplot.stats(data1$fixed.acidity)$out
boxplot(data1$alcohol~data1$volatile.acidity , data = data1, xlab = "volatile Acidity ",ylab = "alcohol", main = "BoxPlot for Predicated Data")
outlier_values <- boxplot.stats(data1$volatile.acidity)$out
boxplot(data1$volatile.acidity , main="Acidity ", boxwex=0.1)
mtext(paste("With Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
outlierKD <- function(dt, var) {
var_name <- eval(substitute(var),eval(dt))
tot <- sum(!is.na(var_name))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
message("Outliers identified: ", na2 - na1, " from ", tot, " observations")
message("Proportion (%) of outliers: ", (na2 - na1) / tot*100)
message("Mean of the outliers: ", mo)
m2 <- mean(var_name, na.rm = T)
message("Mean without removing outliers: ", m1)
message("Mean if we remove outliers: ", m2)
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
message("Outliers successfully removed", "\n")
return(invisible(dt))
} else{
message("Nothing changed", "\n")
return(invisible(var_name))
}
}
outlierKD(data1, data1$volatile.acidity )
outlierKD <- function(dt, var) {
var_name <- eval(substitute(var),eval(dt))
tot <- sum(!is.na(var_name))
na1 <- sum(is.na(var_name))
m1 <- mean(var_name, na.rm = T)
par(mfrow=c(2, 2), oma=c(0,0,3,0))
boxplot(var_name, main="With outliers")
hist(var_name, main="With outliers", xlab=NA, ylab=NA)
outlier <- boxplot.stats(var_name)$out
mo <- mean(outlier)
var_name <- ifelse(var_name %in% outlier, NA, var_name)
boxplot(var_name, main="Without outliers")
hist(var_name, main="Without outliers", xlab=NA, ylab=NA)
title("Outlier Check", outer=TRUE)
na2 <- sum(is.na(var_name))
message("Outliers identified: ", na2 - na1, " from ", tot, " observations")
message("Proportion (%) of outliers: ", (na2 - na1) / tot*100)
message("Mean of the outliers: ", mo)
m2 <- mean(var_name, na.rm = T)
message("Mean without removing outliers: ", m1)
message("Mean if we remove outliers: ", m2)
response <- readline(prompt="Do you want to remove outliers and to replace with NA? [yes/no]: ")
if(response == "y" | response == "yes"){
dt[as.character(substitute(var))] <- invisible(var_name)
assign(as.character(as.list(match.call())$dt), dt, envir = .GlobalEnv)
message("Outliers successfully removed", "\n")
return(invisible(dt))
} else{
message("Nothing changed", "\n")
return(invisible(var_name))
}
}
outlierKD(data1, data1$volatile.acidity )
outlier_values <- boxplot.stats(data1$volatile.acidity )$out
boxplot(data1$volatile.acidity , main="Acidity ", boxwex=0.1)
mtext(paste("Without Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
relation<-lm(data1$alcohol~data1$volatile.acidity )
print(relation)
plot(data1$volatile.acidity ,data1$alcohol,col = "black",main = "Relationship between volatile Acidity  and alcohol Content",
abline(lm(data1$alcohol~data1$volatile.acidity )),cex=1.2,pch = 19,xlab = "Acidity Level",ylab = "Alcohol Content",xlim = c(6,8),ylim = c(10,12))
a1<-data.frame(data1$volatile.acidity )
exp1<-predict.lm(relation,newdata = a1)
print(summary(exp1))
plot(data1$volatile.acidity ,data1$alcohol,col = "black",main = "Relationship between volatile Acidity  and alcohol Content",
abline(lm(data1$alcohol~data1$volatile.acidity )),cex=1.2,pch = 19,xlab = "Acidity Level",ylab = "Alcohol Content")
hist(exp1)
hist(data2$alcohol)
res1<-data.frame(data2$alcohol[1:1000],exp1[1:1000])
write.csv(res1,"output4.csv")
res<-cor.test(data1$free.sulfur.dioxide , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$total.sulfur.dioxide , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$density , data1$alcohol  , method="pearson")
print(res)
res<-cor.test(data1$pH , data1$alcohol  , method="pearson")
print(res)
install.packages("e1071")
library(e1071)
read.matrix.csr("tmc2007_train.svm")
library(caret)
setwd("F:/4thyear/Wine Quality")
read.matrix.csr("tmc2007_train.svm", fac = TRUE, ncol = NULL)
library(tm)
library(plyr)
library(class)
library(caret)
library(tm)
library(plyr)
library(class)
library(caret)
library(e1071)
setwd("F:/4thyear/Wine Quality")
data1<-read.matrix.csr("tmc2007_train.svm", fac = TRUE, ncol = NULL)
data1
library(caret)
install.packages("kernlab")
install.packages("kernlab")
data1
example1 <- c('Cats like to chase mice.', 'Dogs bite people.', 'Dogs like to run after cats.')
str(example1)
example1 <- c('Cats like to chase mice.', 'Dogs bite people.', 'Dogs like to run after cats.')
str(example1)
class(example1)
library(tm)
library(tibble)
corpus <- Corpus(VectorSource(example1))
tdm<-DocumentTermMatrix(corpus,removeNumbers=TRUE,removePunctuation=TRUE)
corpus <- Corpus(VectorSource(example1))
tdm<-DocumentTermMatrix(corpus,list(removeNumbers=TRUE,removePunctuation=TRUE))
traindata1 <- as.matrix(tdm)
train_set <- as.matrix(tdm)
train_set <- cbind(train_set, c(0,1,0))
colnames(train_set)[ncol(train_set)] <- "y"
train_set <- as.data.frame(train_set)
train_set$y <- as.factor(train_set$y)
train_set
example1_model <- train(y ~., data = train_set, method = 'svm')
example1_model <- train(y ~., data = train_set, method = 'svmLinear1')
example1_model <- train(y ~., data = train_set, method = 'svmLinear3')
library(class)
library(caret)
example1_model <- train(y ~., data = train_set, method = 'svmLinear3')
example1_model <- train(y ~., data = train_set, method = 'svmLinear3')
example1_model <- train(y ~., data = train_set, method = 'svmLinear3')
train(y~.,data=train_set,method='svmLinear3')
example1_model <- train(y ~., data = train_set)
train(y~.,data=train_set,method='svmLinear3')
example1_model <- train(y ~., data = train_set)
train(y~.,data=train_set,method='svmLinear3',method=names(getModelInfo()))
library(tm)
library(RCurl)
url <-"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
docs <- getURL(url, ssl.verifypeer=FALSE)
connection <- textConnection(docs)
dataset <- read.csv(connection, header=FALSE)
head(dataset)
head(dataset)
docs <- tm_map(docs, removePunctuation)
docs <- Corpus(DirSource(dataset))
class(dataset)
docs <- Corpus(DataframeSource(dataset))
install.packages("CRAN")
install.packages("RTextTools")
library(RTextTools)
setwd("F:/4thyear/Wine Quality")
data <- c('Cats like to chase mice.', 'Dogs like to eat big bones.')
corpus <- VCorpus(VectorSource(data))
tdm <- DocumentTermMatrix(corpus, list(removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
train <- as.matrix(tdm)
train <- cbind(train, c(0, 1))
colnames(train)[ncol(train)] <- 'y'
train <- as.data.frame(train)
train$y <- as.factor(train$y)
fit <- train(y ~ ., data = train, method = 'bayesglm')
library(tm)
library(caret)
setwd("F:/4thyear/Wine Quality")
library(tm)
library(caret)
setwd("F:/4thyear/Wine Quality")
data <- c('Cats like to chase mice.', 'Dogs like to eat big bones.')
corpus <- VCorpus(VectorSource(data))
tdm <- DocumentTermMatrix(corpus, list(removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
train <- as.matrix(tdm)
train <- cbind(train, c(0, 1))
colnames(train)[ncol(train)] <- 'y'
train <- as.data.frame(train)
train$y <- as.factor(train$y)
fit <- train(y ~ ., data = train, method = 'bayesglm')
library(caret)
install.packages("kernlab")
library(tm)
library(caret)
setwd("F:/4thyear/Wine Quality")
data <- c('Cats like to chase mice.', 'Dogs like to eat big bones.')
corpus <- VCorpus(VectorSource(data))
tdm <- DocumentTermMatrix(corpus, list(removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
train <- as.matrix(tdm)
train <- cbind(train, c(0, 1))
colnames(train)[ncol(train)] <- 'y'
train <- as.data.frame(train)
train$y <- as.factor(train$y)
fit <- train(y ~ ., data = train, method = 'bayesglm')
predict(fit, newdata = train)
fit <- train(y ~ ., data = train, method = 'bayesglm')
predict(fit, newdata = train)
data2 <- c('Bats eat bugs.')
corpus <- VCorpus(VectorSource(data2))
tdm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(tdm), removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
test <- as.matrix(tdm)
predict(fit, newdata = test)
data2 <- c('Bats eat bugs too many.')
corpus <- VCorpus(VectorSource(data2))
tdm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(tdm), removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
test <- as.matrix(tdm)
predict(fit, newdata = test)
library(tm)
library(caret)
setwd("F:/4thyear/Wine Quality")
data <- c('Cats like to chase mice.', 'Dogs like to eat big bones.')
corpus <- VCorpus(VectorSource(data))
tdm <- DocumentTermMatrix(corpus, list(removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
train <- as.matrix(tdm)
train <- cbind(train, c(0, 1))
colnames(train)[ncol(train)] <- 'y'
train <- as.data.frame(train)
train$y <- as.factor(train$y)
fit <- train(y ~ ., data = train, method = 'bayesglm')
predict(fit, newdata = train)
data
train
predict(fit, newdata = train)
data2 <- c('Bats eat bugs too many.')
corpus <- VCorpus(VectorSource(data2))
tdm <- DocumentTermMatrix(corpus, control = list(dictionary = Terms(tdm), removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
test <- as.matrix(tdm)
predict(fit, newdata = test)
fit <- train(y ~ ., data = train, method = 'svmLinear3')
library(tm)
library(caret)
setwd("F:/4thyear/Wine Quality")
data <- c('Cats like to chase mice.', 'Dogs like to eat big bones.')
corpus <- VCorpus(VectorSource(data))
tdm <- DocumentTermMatrix(corpus, list(removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
train <- as.matrix(tdm)
train <- cbind(train, c(0, 1))
colnames(train)[ncol(train)] <- 'y'
train <- as.data.frame(train)
train$y <- as.factor(train$y)
fit <- train(y ~ ., data = train, method = 'svmLinear3')
library
library(pander)
install.packages(Pander)
install.packages("Pander")
install.packages("pander")
library(pander)
library(pander)
setwd("F:/4thyear/Wine Quality")
data1<-read.csv(toyamazonPhilips, header=TRUE)
setwd("F:/4thyear/Wine Quality")
data1<-read.csv("toyamazonPhilips.csv", header=TRUE)
data1<-read.csv("toyamazonPhilips.csv", header=TRUE)
pandoc.table(product_review[2:4,1:3], justify = c('left', 'left', 'center'), style = 'grid')
data1<-read.csv("toyamazonPhilips.csv", header=TRUE)
pandoc.table(data1[2:4,1:3], justify = c('left', 'left', 'center'), style = 'grid')
setwd("F:/4thyear/Wine Quality")
data1<-read.csv("toyamazonPhilips.csv", header=TRUE)
pandoc.table(data1[2:3,1:3], justify = c('left', 'left', 'center'), style = 'grid')
setwd("F:/4thyear/Wine Quality")
data1<-read.csv("toyamazonPhilips.csv", header=TRUE)
pandoc.table(data1[2:4,1:3], justify = c('left', 'left', 'center'), style = 'grid')
pandoc.table(data1[2:4,1:3], justify = c('left', 'left', 'center'), style = 'grid')
table(data1$rating)
library(pander)
library(dplyr)
table(data1$rating)
data1 <- data1 %>% filter(rating != 3) %>% mutate(rating_new = if_else(rating >= 4, 1, 0))
product_review_training <-  data1[1:150, ]
library(tm)
corpus_toy <- Corpus(VectorSource(product_review_training$review))
tdm_toy <- DocumentTermMatrix(corpus_toy, list(removePunctuation = TRUE,
removeNumbers = TRUE))
training_set_toy <- as.matrix(tdm_toy)
training_set_toy <- cbind(training_set_toy, product_review_training$rating_new)
colnames(training_set_toy)[ncol(training_set_toy)] <- "y"
training_set_toy <- as.data.frame(training_set_toy)
training_set_toy$y <- as.factor(training_set_toy$y)
library(caret)
review_toy_model <- train(y ~., data = training_set_toy, method = 'svmLinear3')
review_toy_model <- train(y ~., data = training_set_toy, method = 'svmLinear3')
test_review_data <- product_review[151:191, ]
test_corpus <- Corpus(VectorSource(test_review_data$review))
test_tdm <- DocumentTermMatrix(test_corpus, control=list(dictionary = Terms(tdm_toy)))
test_tdm <- as.matrix(test_tdm)
library(caret)
review_toy_model <- train(y ~., data = training_set_toy, method = 'svmLinear3')
test_review_data <- data1[151:191, ]
test_corpus <- Corpus(VectorSource(test_review_data$review))
test_tdm <- DocumentTermMatrix(test_corpus, control=list(dictionary = Terms(tdm_toy)))
test_tdm <- as.matrix(test_tdm)
model_toy_result <- predict(review_toy_model, newdata = test_tdm)
check_accuracy <- as.data.frame(cbind(prediction = model_toy_result, rating = test_review_data$rating_new))
check_accuracy <- check_accuracy %>% mutate(prediction = as.integer(prediction) - 1)
check_accuracy$accuracy <- if_else(check_accuracy$prediction == check_accuracy$rating, 1, 0)
round(prop.table(table(check_accuracy$accuracy)), 3)
library(tm)
library(caret)
setwd("F:/4thyear/Wine Quality")
data <- c('Cats like to chase mice.', 'Dogs like to eat big bones.')
corpus <- VCorpus(VectorSource(data))
tdm <- DocumentTermMatrix(corpus, list(removePunctuation = TRUE, stopwords = TRUE, stemming = TRUE, removeNumbers = TRUE))
predict(fit, newdata = train)
install.packages ("e1071", dependencies = TRUE)
library(e1071)
library(e1071)
attach(iris)
model<-svm(iris$Species~.,data=iris)
summary(model)
x<-subset(iris,select = -iris$Species)
x<-subset(iris,select = -Species)
pred <- predict(model, x)
pred <- predict(model, x)
summary(pred)
table(pred, y)
x<-subset(iris,select = -Species)
y <- Species
pred <- predict(model, x)
summary(pred)
table(pred, y)
table(pred, y)
plot(cmdscale(dist(iris[,-5])),
col = as.integer(iris[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
x <- seq(0.1, 5, by = 0.05)
y <- log(x) + rnorm(x, sd = 0.2)
m   <- svm(x, y)
new <- predict(m, x)
plot(x, y)
points(x, log(x), col = 2)
points(x, new, col = 4)
plot(x, y)
points(x, log(x), col = 2)
points(x, new, col = 4)
points(x, new, col = 4)
points(new,x)
points(x, new, col = 4)
points(x,new)
points(x, log(x), col = 2)
points(x, new, col = 4)
points(x,new)
plot(x, y)
points(x, log(x), col = 2)
points(x, new, col = 4)
m   <- svm(x, y)
summary(m)
new <- predict(m, x)
summary(new)
